<?php

namespace Tests\Unit;

use App\Data\Models\Rotas\Rotas;
use App\Data\Models\Shifts\ShiftCollection;
use App\Data\Models\Shifts\ShiftModel;
use App\Facades\ManningCalculator;
use PHPUnit\Framework\TestCase;
use App\Validators;

/**
 * @package Tests
 * @group unit
 * @group ready
 */
class ManningTest extends TestCase
{
    protected $shiftA;
    protected $shiftB;
    protected $shiftC;
    protected $shiftS;
    protected $shifts = [];
    protected $shiftCollection;
    protected $rota;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->shiftA = new ShiftModel(
            11, 21, 192,
            date_create('2021-08-30 09:00:00'),
            date_create('2021-08-30 13:30:00')
        );
        $this->shiftB = new ShiftModel(
            22, 21, 145,
            date_create('2021-08-30 12:00:00'),
            date_create('2021-08-30 17:30:00')
        );
        $this->shiftC = new \App\Data\Models\Shifts\ShiftModel(
            33, 21, 476,
            date_create('2021-08-30 13:30:00'),
            date_create('2021-08-30 17:30:00')
        );
        $this->shiftS = new ShiftModel(
            11, 21, 192,
            date_create('2021-08-30 09:00:00'),
            date_create('2021-08-30 17:30:00')
        );
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testShiftAddSingle()
    {
        $this->shifts = [$this->shiftS];
        $this->shiftCollection = new ShiftCollection($this->shifts);
        $this->rota = new Rotas();
        $this->rota->setId(21);
        $this->rota->setShifts($this->shiftCollection);

        $manning = ManningCalculator::calculate($this->rota);
        $this->assertIsArray($manning);
        $this->assertEquals(510, $manning['single'][$this->shiftS->getStaffId()]);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testShiftAddTwoOverlap()
    {
        $this->shifts = [$this->shiftA, $this->shiftB];
        $this->shiftCollection = new ShiftCollection($this->shifts);
        $this->rota = new Rotas();
        $this->rota->setId(21);
        $this->rota->setShifts($this->shiftCollection);

        $manning = ManningCalculator::calculate($this->rota);
        $this->assertIsArray($manning);
        $this->assertEquals(180, $manning['single'][$this->shiftA->getStaffId()]);
        $this->assertEquals(240, $manning['single'][$this->shiftB->getStaffId()]);
    }

    public function testShiftAddTwoNoOverlap()
    {
        $this->shifts = [$this->shiftA, $this->shiftC];
        $this->shiftCollection = new ShiftCollection($this->shifts);
        $this->rota = new Rotas();
        $this->rota->setId(21);
        $this->rota->setShifts($this->shiftCollection);

        $manning = ManningCalculator::calculate($this->rota);
        $this->assertIsArray($manning);
        $this->assertEquals(270, $manning['single'][$this->shiftA->getStaffId()]);
        $this->assertEquals(240, $manning['single'][$this->shiftC->getStaffId()]);
    }
}
